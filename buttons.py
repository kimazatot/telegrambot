
from aiogram import types
import datetime as dt
# class Buttons:
#     confirmation_markup = types.ReplyKeyboardMarkup(
#         resize_keyboard=True,
#         one_time_keyboard=True
#     )

#     def confirm_number(self):
#         confirm_number = types.KeyboardButton(
#             text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
#             request_contact=True
#         )

#         self.confirmation_markup.add(confirm_number)

#         return self.confirmation_markup


#     def confirm_location(self):
#         confirm_location = types.KeyboardButton(
#             text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
#             request_location=True
#         )

#         self.confirmation_markup.add(confirm_location)

#         return self.confirmation_markup 


#     def main_menu(self):
#         menu_btn = types.KeyboardButton(
#             text='–ú–µ–Ω—é üìñ'
#         )

#         order_to_deliver_btn = types.KeyboardButton(
#             text='–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ –≤—ã–Ω–æ—Å üöó'
#         )

#         book_table_btn = types.KeyboardButton(
#             text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üçΩ'
#         )

#         feedback_btn = types.KeyboardButton(
#             text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üí≠'
#         )


class Buttons:
    def main_buttons(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
            row_width=2
        )

        book_table_btn = types.KeyboardButton(
            text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ ‚è∞',
        )

        show_menu_btn = types.KeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é üóí',
        )

        set_feedback_btn = types.KeyboardButton(
            text='–û—Ç–∑—ã–≤—ã ‚úÖ',
        )

        markup.add(
            book_table_btn,
            show_menu_btn,
            set_feedback_btn,
        )

        return markup


    def feedback_buttons(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
        )

        send_feedback_btn = types.KeyboardButton(
            text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úç',
        )

        read_feedbacks_btn = types.KeyboardButton(
            text='–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã üëç',
        )


        markup.add(
            send_feedback_btn,
            read_feedbacks_btn,
        )

        return markup


    def back_to_menu(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
        )

        back_to_menu_btn = types.KeyboardButton(
            text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
        )

        markup.add(back_to_menu_btn)

        return markup

    def confirm_phone_number(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
        )

        confirm_btn = types.KeyboardButton(
            text='–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å',
            request_contact=True
        )
         
        markup.add(confirm_btn)
        return markup

    def ask_phone(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
        )
        confirm_phone_btn = types.KeyboardButton(
            text='–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            request_contact=True
        )
        markup.add(confirm_phone_btn)
        return markup


    def ask_location(self):
        markup = types.ReplyKeyboardMarkup(
            one_time_keyboard=True,
            resize_keyboard=True,
        )
        confirm_location_btn = types.KeyboardButton(
            text ='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
            request_location=True
        )

        markup.add(confirm_location_btn)
        return markup

class InlineButtons:
    def show_menu_buttons(self):
        markup = types.InlineKeyboardMarkup(
            row_width=2
        )
        
        primary_meal_btn = types.InlineKeyboardButton(
            text='–§–∏—Ä–º–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞',
            callback_data='primary_meal'
        )

        breakfast_btn = types.InlineKeyboardButton(
            text='–ó–∞–≤—Ç—Ä–∞–∫–∏',
            callback_data='breakfast'
        )

        lunch_btn = types.InlineKeyboardButton(
            text='–û–±–µ–¥—ã',
            callback_data='lunch'
        )

        dinner_btn = types.InlineKeyboardButton(
            text='–£–∂–∏–Ω',
            callback_data='dinner'
        )

        resto_site_btn = types.InlineKeyboardButton(
            text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç',
            callback_data='resto',
            url='https://freehtml5.co/preview/?item=resto-free-responsive-bootstrap-4-template-for-restaurants'
        )

        markup.add(
            primary_meal_btn,
            breakfast_btn,
            lunch_btn,
            dinner_btn,
            resto_site_btn
        )

        return markup

    
    def make_order(self, definiton: tuple):
        """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç inline-–∫–Ω–æ–ø–∫—É –ó–∞–∫–∞–∑–∞—Ç—å üî•"""
        markup = types.InlineKeyboardMarkup(
            row_width=2
        )

        order_btn = types.InlineKeyboardButton(
            text='–ó–∞–∫–∞–∑–∞—Ç—å üî•',
            callback_data=f'{definiton[0]} {definiton[1]}',
        )

        markup.add(order_btn)

        return markup

    def calendar(self):
        current_month = dt.datetime.today().month
        current_day = dt.datetime.today().day

        month = (
            '–Ø–Ω–≤–∞—Ä—å',
            '–§–µ–≤—Ä–∞–ª—å',
            '–ú–∞—Ä—Ç',
            '–ê–ø—Ä–µ–ª—å',
            '–ú–∞–π',
            '–ò—é–Ω—å',
            '–ò—é–ª—å',
            '–ê–≤–≥—É—Å—Ç',
            '–°–µ–Ω—Ç—è–±—Ä—å',
            '–û–∫—Ç—è–±—Ä—å',
            '–ù–æ—è–±—Ä—å',
            '–î–µ–∫–∞–±—Ä—å'
        )

        markup = types.InlineKeyboardMarkup(
            row_width=3
        )

        if current_month % 2 == 1:
            for i in range(current_day+1, 32):
                markup.add(
                    types.InlineKeyboardButton(
                    text = f'{month[current_month-1]} - {i}',
                    callback_data = f'{month[current_month-1]} {i}'
                    )
                )
            else:
                return markup 


        elif current_month % 2 == 0:
            if current_month == 2:
                limit = 29
            elif current_month == 8:
                limit = 32
            else:
                limit = 31

            for i in range(current_day+1, limit):
                markup.add(
                    types.InlineKeyboardButton(
                    text = f'{month[current_month-1]} - {i}',
                    callback_data = f'{month[current_month-1]} {i}'
                    )
                )
            else:
                return markup 
        
        
    def clock(self):
        time = (
            '09:00',
            '10:00',
            '11:00',
            '12:00',
            '13:00',
            '14:00',
            '15:00',
            '16:00',
            '17:00',
            '18:00',
            '19:00',
            '20:00',
            '21:00',
            '22:00',
            '23:00',
            '00:00',
        )

        markup = types.InlineKeyboardMarkup(
            row_width=3
        )

        for t in time:
            markup.add(
                types.InlineKeyboardButton(
                    text = f'{t} —á–∞—Å–æ–≤',
                    callback_data=t
                )
            )
        else:
            return markup