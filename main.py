from ssl import MemoryBIO
from aiogram import executor, types
from aiogram.dispatcher.storage import FSMContext
from configs import dispatcher, bot, resize_image, BotStates
from buttons import InlineButtons, Buttons
from aiogram.types import Message, CallbackQuery, location, message
from datetime import date, datetime as dt
from db import PostgreSQL

btns = Buttons()
ibtns = InlineButtons()


@dispatcher.message_handler(commands=["start"], state='*')
async def welcome(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_sticker = open('/home/adinai/Desktop/lol.gif', 'rb')

    await bot.send_animation(
        chat_id=message.from_user.id,
        animation=welcome_sticker
    )

    await BotStates.show_main_menu_buttons.set()

    return await bot.send_message(
        chat_id=message.from_user.id,
        text=f'''
        *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}*
        –ö–æ–º–ø–∞–Ω–∏—è Resto —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å –í–∞—Å –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ!
        –í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
        ''',
        parse_mode=types.ParseMode.MARKDOWN,
        reply_markup=btns.main_buttons()
    )



@dispatcher.message_handler(content_types=["text"], state=BotStates.show_main_menu_buttons)
async def main_response(message: Message):
    """–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –µ–º—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    if message.text == '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ ‚è∞':
        await BotStates.set_day.set()
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
            reply_markup=ibtns.calendar()
        )
    
    elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é üóí':
        await BotStates.check_inline_btns.set()
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="üòãüòãüòãüòãüòã –û—Å–Ω–æ–≤–Ω–æ–µ –ú–µ–Ω—é üç¥ üòãüòãüòãüòãüòã",
            reply_markup=ibtns.show_menu_buttons()
        )

    elif message.text == '–û—Ç–∑—ã–≤—ã ‚úÖ':
        await BotStates.feedback_menu.set()
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=btns.feedback_buttons()
        )
    elif message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        await BotStates.show_main_menu_buttons.set()

        return await bot.send_message(
            chat_id=message.from_user.id,
            text = '–í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:',
            reply_markup = btns.main_buttons()
        )
    else:
        await BotStates.show_main_menu_buttons.set()

        return await bot.send_message(
            chat_id=message.from_user.id,
            text = '–ü—Ä–æ—Å—Ç–∏—Ç–µ —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª',
            reply_markup = btns.main_buttons()
        )

@dispatcher.callback_query_handler(state=BotStates.set_day)
async def booking_day(callback:CallbackQuery):
    if callback.data:
        global reservation_list
        reservation_list = []
        reservation_list.append(callback.data.split(' ')[0])
        reservation_list.append(callback.data.split(' ')[1])
        await BotStates.set_time.set()
    
        return await bot.send_message(
            chat_id = callback.from_user.id,
            text = '–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:',
            reply_markup = ibtns.clock()

        )

@dispatcher.callback_query_handler(state=BotStates.set_time)
async def booking_time(callback:CallbackQuery):
    if callback.data:
        await BotStates.booking_completed.set()
        reservation_list.append(callback.data.split(' ')[0])
    
        return await bot.send_message(
            chat_id = callback.from_user.id,
            text = '–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            reply_markup = btns.ask_phone()

        )

@dispatcher.message_handler(content_types=["contact"], state=BotStates.booking_completed)
async def confirm_number_for_reservation(message:Message):
    if message.contact is not None:

        psql = PostgreSQL()
        psql.insert(
            (
                'first_name',
                'last_name',
                'month_of_reservation',
                'day_of_reservation',
                'time_of_reservation',
                'phone_number',
            ),
            (
               message.from_user.first_name,
               message.from_user.last_name,
               reservation_list[0],
               reservation_list[1],
               reservation_list[2],
               message.contact.phone_number

            ),
            'reservations'
        )
        psql.connection.close()

        await BotStates.show_main_menu_buttons.set()

        return await bot.send_message(
            chat_id=message.from_user.id,
            text = '*–°—Ç–æ–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω üòÖ*',
            reply_markup=btns.main_buttons()
        )


@dispatcher.callback_query_handler(state=BotStates.check_inline_btns)
async def show_menu(callback: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–∂–∞—Ç–æ–π inline-–∫–Ω–æ–ø–∫–∏."""
    psql = PostgreSQL()
    await BotStates.user_confirmation.set()

    if callback.data == 'breakfast':
        for breakfast in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meal',
            {"meal_type": 2}
        ):
            image = resize_image(breakfast[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{breakfast[0]}*\n_–¶–µ–Ω–∞:_ *{breakfast[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((breakfast[-1], breakfast[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )

    elif callback.data == 'lunch':
        for lunch in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meal',
            {"meal_type": 3}
        ):
            image = resize_image(lunch[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{lunch[0]}*\n_–¶–µ–Ω–∞:_ *{lunch[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((lunch[-1], lunch[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )

    elif callback.data == 'dinner':
        for dinner in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meal',
            {"meal_type": 4}
        ):
            image = resize_image(dinner[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{dinner[0]}*\n_–¶–µ–Ω–∞:_ *{dinner[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((dinner[-1], dinner[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )


    elif callback.data == 'primary_meal':
        for primary_meal in psql.select(
            (
                'name', 'image_path', 'price', 'meal_type'
            ),
            'meal',
            {"meal_type": 1}
        ):
            image = resize_image(primary_meal[1])
            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=open(image, 'rb'),
                caption=f'_–ù–∞–∑–≤–∞–Ω–∏–µ:_ *{primary_meal[0]}*\n_–¶–µ–Ω–∞:_ *{primary_meal[2]} —Å–æ–º*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=ibtns.make_order((primary_meal[-1], primary_meal[0]))
            )
        else:
            return await bot.send_message(
                chat_id=callback.from_user.id,
                text='–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!',
                reply_markup=btns.back_to_menu()
            )
    



@dispatcher.callback_query_handler(state=BotStates.user_confirmation)
async def make_order(callback: CallbackQuery):
    global order_list
    order_list = []
    if callback.data:
        order_list.append(callback.data)

        await BotStates.ask_phone.set()

        return await bot.send_message(
            chat_id = callback.from_user.id,
            text = "–ü–æ–∂–∞–ª—É–π—É—Å—Ç–∞ –ø–æ–¥–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å",
            reply_markup=btns.ask_phone()
        )


@dispatcher.message_handler(content_types=["contact"], state=BotStates.ask_phone)
async def confirm_number_for_order(message:Message):
    if message.contact is not None:

        await BotStates.ask_location.set()
        order_list.append(message.contact.phone_number)

        return await bot.send_message(
            chat_id = message.from_user.id,
            text = '–ü–æ–¥–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è',
            reply_markup= btns.ask_location()
        )


@dispatcher.message_handler(content_types=["location"], state=BotStates.ask_location)
async def confirm_location_for_order(message: Message):
    if message.location is not None:
        psql = PostgreSQL()
        psql.insert(
            (
                'first_name',
                'last_name',
                'meal_name',
                'meal_type',
                'phone_number',
                'location',
            ),
            (
                message.from_user.first_name,
                message.from_user.last_name,
                order_list[0].split(' ')[1],
                order_list[0].split(' ')[0],
                order_list[1],
                f'{message.location.latitude} {message.location.longitude}'
            ),
            'orders'
        )
        await BotStates.check_clicked_button.set()

        psql.connection.close()

        return await bot.send_message(
            chat_id = message.from_user.id,
            text = '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        )


@dispatcher.message_handler(content_types=["text"], state=BotStates.feedback_menu)
async def feedbacks(message: Message):
    psql = PostgreSQL()
    if message.text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úç':
        await BotStates.get_feedback.set()
        return await message.answer(
            text = '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à –æ—Ç–∑—ã–≤!*',
            parse_mode = types.ParseMode.MARKDOWN
        )
    elif message.text == '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã üëç':
        feedbacks = psql.select(
            (
                'author_first_name',
                'author_last_name',
                'feedback_text',
                'date_created',
            ),
            'feedbacks'
        )
        for feedback in feedbacks:
            date_time = dt.strftime(feedback[-1], '%Y-%m-%d %H:%M')
            await bot.send_message(
                chat_id = message.from_user.id,
                text=f'*{feedback[0]} {feedback[1]}*\n\n{feedback[2]}\n\n_{date_time}_',
                parse_mode=types.ParseMode.MARKDOWN,
            )
        else:
            await BotStates.show_main_menu_buttons.set()
            await bot.send_message(
                chat_id = message.from_user.id,
                text='–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ ‚è© *–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é*',
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=btns.back_to_menu()
            )
            psql.connection.close()
    else:
        await BotStates.feedback_menu.set()
        return await bot.send_message(
            chat_id=message.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=btns.feedback_buttons()
        )

@dispatcher.message_handler(content_types=["text"], state=BotStates.get_feedback)
async def insert_feedback(message:Message):
    if message.text == '' or message.text == ' ':

        await BotStates.show_main_menu_buttons.set()

        return await bot.send_message(
            chat_id=message.from_user.id,
            text = '*–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª üòÖ*',
            reply_markup = btns.main_buttons()
        )
    else:
        global feedback_message
        feedback_message = message
        await BotStates.confirm_number.set()
        return await message.answer(
            text='–ü–æ–¥–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
            reply_markup=btns.confirm_phone_number()
        )

@dispatcher.message_handler(content_types=["contact"], state=BotStates.confirm_number)
async def confirm_number_for_feedback(message:Message):
    if message.contact is not None:

        psql = PostgreSQL()
        psql.insert(
            (
                'author_id',
                'author_first_name',
                'author_last_name',
                'author_phone_number',
                'feedback_text',
            ),
            (
               feedback_message.from_user.id,
               feedback_message.from_user.first_name,
               feedback_message.from_user.last_name,
               message.contact.phone_number,
               feedback_message.text,
            ),
            'feedbacks'
        )
        psql.connection.close()

        await BotStates.feedback_menu.set()

        return await bot.send_message(
            chat_id=message.from_user.id,
            text = '*–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üòÖ*',
            reply_markup=btns.feedback_buttons()
        )


if __name__ == '__main__':
    executor.start_polling(dispatcher=dispatcher)

# sudo apt-get install build-essential libssl-dev libffi-dev libxml2-dev libxslt1-dev python3.8-dev python3.9-dev